// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.example.android.networkconnect.datafragment.datainj;

import com.example.android.networkconnect.MainActivity;
import com.example.android.networkconnect.StatusActivity;
import com.example.android.networkconnect.app.AppModule;
import com.example.android.networkconnect.datafragment.model.DataService;
import com.example.android.networkconnect.datafragment.model.DataService_MembersInjector;
import com.example.android.networkconnect.datafragment.viewmodel.ListViewModel;
import com.example.android.networkconnect.datafragment.viewmodel.ListViewModel_MembersInjector;
import dagger.internal.Preconditions;

public final class DaggerApiComponent implements ApiComponent {
  private ApiModule apiModule;

  private DaggerApiComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  public static ApiComponent create() {
    return new Builder().build();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.apiModule = builder.apiModule;
  }

  @Override
  public void inject(DataService service) {
    injectDataService(service);
  }

  @Override
  public void inject(ListViewModel viewModel) {
    injectListViewModel(viewModel);
  }

  @Override
  public void inject(MainActivity activity) {}

  @Override
  public void inject(StatusActivity activity) {}

  private DataService injectDataService(DataService instance) {
    DataService_MembersInjector.injectApi(
        instance,
        Preconditions.checkNotNull(
            apiModule.provideCharacterApi(),
            "Cannot return null from a non-@Nullable @Provides method"));
    return instance;
  }

  private ListViewModel injectListViewModel(ListViewModel instance) {
    ListViewModel_MembersInjector.injectDataService(
        instance,
        Preconditions.checkNotNull(
            apiModule.provideCharacterService(),
            "Cannot return null from a non-@Nullable @Provides method"));
    ListViewModel_MembersInjector.injectDisposable(
        instance,
        Preconditions.checkNotNull(
            apiModule.provideCompositeDisposable(),
            "Cannot return null from a non-@Nullable @Provides method"));
    return instance;
  }

  public static final class Builder {
    private ApiModule apiModule;

    private Builder() {}

    public ApiComponent build() {
      if (apiModule == null) {
        this.apiModule = new ApiModule();
      }
      return new DaggerApiComponent(this);
    }

    public Builder apiModule(ApiModule apiModule) {
      this.apiModule = Preconditions.checkNotNull(apiModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This
     *     method is a no-op. For more, see https://google.github.io/dagger/unused-modules.
     */
    @Deprecated
    public Builder appModule(AppModule appModule) {
      Preconditions.checkNotNull(appModule);
      return this;
    }
  }
}
