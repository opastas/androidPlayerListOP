// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.example.android.networkconnect.datafragment.viewmodel;

import com.example.android.networkconnect.datafragment.model.DataService;
import dagger.MembersInjector;
import io.reactivex.disposables.CompositeDisposable;
import javax.inject.Provider;

public final class ListViewModel_MembersInjector implements MembersInjector<ListViewModel> {
  private final Provider<DataService> dataServiceProvider;

  private final Provider<CompositeDisposable> disposableProvider;

  public ListViewModel_MembersInjector(
      Provider<DataService> dataServiceProvider, Provider<CompositeDisposable> disposableProvider) {
    this.dataServiceProvider = dataServiceProvider;
    this.disposableProvider = disposableProvider;
  }

  public static MembersInjector<ListViewModel> create(
      Provider<DataService> dataServiceProvider, Provider<CompositeDisposable> disposableProvider) {
    return new ListViewModel_MembersInjector(dataServiceProvider, disposableProvider);
  }

  @Override
  public void injectMembers(ListViewModel instance) {
    injectDataService(instance, dataServiceProvider.get());
    injectDisposable(instance, disposableProvider.get());
  }

  public static void injectDataService(ListViewModel instance, DataService dataService) {
    instance.dataService = dataService;
  }

  public static void injectDisposable(ListViewModel instance, CompositeDisposable disposable) {
    instance.disposable = disposable;
  }
}
